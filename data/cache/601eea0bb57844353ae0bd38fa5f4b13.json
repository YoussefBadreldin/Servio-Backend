{"matches": [{"repo": "saltstack/salt", "path": "salt/transport/zeromq.py", "func_name": "ZeroMQReqServerChannel.close", "original_string": "def close(self):\n        '''\n        Cleanly shutdown the router socket\n        '''\n        if self._closing:\n            return\n        log.info('MWorkerQueue under PID %s is closing', os.getpid())\n        self._closing = True\n        # pylint: disable=E0203\n        if getattr(self, '_monitor', None) is not None:\n            self._monitor.stop()\n            self._monitor = None\n        if getattr(self, '_w_monitor', None) is not None:\n            self._w_monitor.stop()\n            self._w_monitor = None\n        if hasattr(self, 'clients') and self.clients.closed is False:\n            self.clients.close()\n        if hasattr(self, 'workers') and self.workers.closed is False:\n            self.workers.close()\n        if hasattr(self, 'stream'):\n            self.stream.close()\n        if hasattr(self, '_socket') and self._socket.closed is False:\n            self._socket.close()\n        if hasattr(self, 'context') and self.context.closed is False:\n            self.context.term()", "language": "python", "code": "def close(self):\n        '''\n        Cleanly shutdown the router socket\n        '''\n        if self._closing:\n            return\n        log.info('MWorkerQueue under PID %s is closing', os.getpid())\n        self._closing = True\n        # pylint: disable=E0203\n        if getattr(self, '_monitor', None) is not None:\n            self._monitor.stop()\n            self._monitor = None\n        if getattr(self, '_w_monitor', None) is not None:\n            self._w_monitor.stop()\n            self._w_monitor = None\n        if hasattr(self, 'clients') and self.clients.closed is False:\n            self.clients.close()\n        if hasattr(self, 'workers') and self.workers.closed is False:\n            self.workers.close()\n        if hasattr(self, 'stream'):\n            self.stream.close()\n        if hasattr(self, '_socket') and self._socket.closed is False:\n            self._socket.close()\n        if hasattr(self, 'context') and self.context.closed is False:\n            self.context.term()", "code_tokens": ["def", "close", "(", "self", ")", ":", "if", "self", ".", "_closing", ":", "return", "log", ".", "info", "(", "'MWorkerQueue under PID %s is closing'", ",", "os", ".", "getpid", "(", ")", ")", "self", ".", "_closing", "=", "True", "# pylint: disable=E0203", "if", "getattr", "(", "self", ",", "'_monitor'", ",", "None", ")", "is", "not", "None", ":", "self", ".", "_monitor", ".", "stop", "(", ")", "self", ".", "_monitor", "=", "None", "if", "getattr", "(", "self", ",", "'_w_monitor'", ",", "None", ")", "is", "not", "None", ":", "self", ".", "_w_monitor", ".", "stop", "(", ")", "self", ".", "_w_monitor", "=", "None", "if", "hasattr", "(", "self", ",", "'clients'", ")", "and", "self", ".", "clients", ".", "closed", "is", "False", ":", "self", ".", "clients", ".", "close", "(", ")", "if", "hasattr", "(", "self", ",", "'workers'", ")", "and", "self", ".", "workers", ".", "closed", "is", "False", ":", "self", ".", "workers", ".", "close", "(", ")", "if", "hasattr", "(", "self", ",", "'stream'", ")", ":", "self", ".", "stream", ".", "close", "(", ")", "if", "hasattr", "(", "self", ",", "'_socket'", ")", "and", "self", ".", "_socket", ".", "closed", "is", "False", ":", "self", ".", "_socket", ".", "close", "(", ")", "if", "hasattr", "(", "self", ",", "'context'", ")", "and", "self", ".", "context", ".", "closed", "is", "False", ":", "self", ".", "context", ".", "term", "(", ")"], "docstring": "Cleanly shutdown the router socket", "docstring_tokens": ["Cleanly", "shutdown", "the", "router", "socket"], "sha": "e8541fd6e744ab0df786c0f76102e41631f45d46", "url": "https://github.com/saltstack/salt/blob/e8541fd6e744ab0df786c0f76102e41631f45d46/salt/transport/zeromq.py#L624-L648", "partition": "train"}, {"repo": "saltstack/salt", "path": "salt/transport/zeromq.py", "func_name": "ZeroMQPubServerChannel.pub_close", "original_string": "def pub_close(self):\n        '''\n        Disconnect an existing publisher socket and remove it from the local\n        thread's cache.\n        '''\n        if hasattr(self._sock_data, 'sock'):\n            self._sock_data.sock.close()\n            delattr(self._sock_data, 'sock')", "language": "python", "code": "def pub_close(self):\n        '''\n        Disconnect an existing publisher socket and remove it from the local\n        thread's cache.\n        '''\n        if hasattr(self._sock_data, 'sock'):\n            self._sock_data.sock.close()\n            delattr(self._sock_data, 'sock')", "code_tokens": ["def", "pub_close", "(", "self", ")", ":", "if", "hasattr", "(", "self", ".", "_sock_data", ",", "'sock'", ")", ":", "self", ".", "_sock_data", ".", "sock", ".", "close", "(", ")", "delattr", "(", "self", ".", "_sock_data", ",", "'sock'", ")"], "docstring": "Disconnect an existing publisher socket and remove it from the local\n        thread's cache.", "docstring_tokens": ["Disconnect", "an", "existing", "publisher", "socket", "and", "remove", "it", "from", "the", "local", "thread", "s", "cache", "."], "sha": "e8541fd6e744ab0df786c0f76102e41631f45d46", "url": "https://github.com/saltstack/salt/blob/e8541fd6e744ab0df786c0f76102e41631f45d46/salt/transport/zeromq.py#L1002-L1009", "partition": "train"}, {"repo": "saltstack/salt", "path": "salt/cli/support/collector.py", "func_name": "SupportDataCollector.close", "original_string": "def close(self):\n        '''\n        Closes the archive.\n        :return:\n        '''\n        if self.__arch is None:\n            raise salt.exceptions.SaltException('Archive already closed')\n        self._flush_content()\n        self.__arch.close()\n        self.__arch = None", "language": "python", "code": "def close(self):\n        '''\n        Closes the archive.\n        :return:\n        '''\n        if self.__arch is None:\n            raise salt.exceptions.SaltException('Archive already closed')\n        self._flush_content()\n        self.__arch.close()\n        self.__arch = None", "code_tokens": ["def", "close", "(", "self", ")", ":", "if", "self", ".", "__arch", "is", "None", ":", "raise", "salt", ".", "exceptions", ".", "SaltException", "(", "'Archive already closed'", ")", "self", ".", "_flush_content", "(", ")", "self", ".", "__arch", ".", "close", "(", ")", "self", ".", "__arch", "=", "None"], "docstring": "Closes the archive.\n        :return:", "docstring_tokens": ["Closes", "the", "archive", ".", ":", "return", ":"], "sha": "e8541fd6e744ab0df786c0f76102e41631f45d46", "url": "https://github.com/saltstack/salt/blob/e8541fd6e744ab0df786c0f76102e41631f45d46/salt/cli/support/collector.py#L72-L81", "partition": "train"}, {"repo": "saltstack/salt", "path": "salt/cloud/clouds/aliyun.py", "func_name": "stop", "original_string": "def stop(name, force=False, call=None):\n    '''\n    Stop a node\n\n    CLI Examples:\n\n    .. code-block:: bash\n\n        salt-cloud -a stop myinstance\n        salt-cloud -a stop myinstance force=True\n    '''\n    if call != 'action':\n        raise SaltCloudSystemExit(\n            'The stop action must be called with -a or --action.'\n        )\n\n    log.info('Stopping node %s', name)\n\n    instanceId = _get_node(name)['InstanceId']\n\n    params = {\n        'Action': 'StopInstance',\n        'InstanceId': instanceId,\n        'ForceStop': six.text_type(force).lower()\n    }\n    result = query(params)\n\n    return result", "language": "python", "code": "def stop(name, force=False, call=None):\n    '''\n    Stop a node\n\n    CLI Examples:\n\n    .. code-block:: bash\n\n        salt-cloud -a stop myinstance\n        salt-cloud -a stop myinstance force=True\n    '''\n    if call != 'action':\n        raise SaltCloudSystemExit(\n            'The stop action must be called with -a or --action.'\n        )\n\n    log.info('Stopping node %s', name)\n\n    instanceId = _get_node(name)['InstanceId']\n\n    params = {\n        'Action': 'StopInstance',\n        'InstanceId': instanceId,\n        'ForceStop': six.text_type(force).lower()\n    }\n    result = query(params)\n\n    return result", "code_tokens": ["def", "stop", "(", "name", ",", "force", "=", "False", ",", "call", "=", "None", ")", ":", "if", "call", "!=", "'action'", ":", "raise", "SaltCloudSystemExit", "(", "'The stop action must be called with -a or --action.'", ")", "log", ".", "info", "(", "'Stopping node %s'", ",", "name", ")", "instanceId", "=", "_get_node", "(", "name", ")", "[", "'InstanceId'", "]", "params", "=", "{", "'Action'", ":", "'StopInstance'", ",", "'InstanceId'", ":", "instanceId", ",", "'ForceStop'", ":", "six", ".", "text_type", "(", "force", ")", ".", "lower", "(", ")", "}", "result", "=", "query", "(", "params", ")", "return", "result"], "docstring": "Stop a node\n\n    CLI Examples:\n\n    .. code-block:: bash\n\n        salt-cloud -a stop myinstance\n        salt-cloud -a stop myinstance force=True", "docstring_tokens": ["Stop", "a", "node"], "sha": "e8541fd6e744ab0df786c0f76102e41631f45d46", "url": "https://github.com/saltstack/salt/blob/e8541fd6e744ab0df786c0f76102e41631f45d46/salt/cloud/clouds/aliyun.py#L521-L548", "partition": "train"}, {"repo": "saltstack/salt", "path": "salt/cloud/clouds/virtualbox.py", "func_name": "stop", "original_string": "def stop(name, call=None):\n    \"\"\"\n    Stop a running machine.\n    @param name: Machine to stop\n    @type name: str\n    @param call: Must be \"action\"\n    @type call: str\n    \"\"\"\n    if call != 'action':\n        raise SaltCloudSystemExit(\n            'The instance action must be called with -a or --action.'\n        )\n\n    log.info(\"Stopping machine: %s\", name)\n    vb_stop_vm(name)\n    machine = vb_get_machine(name)\n    del machine[\"name\"]\n    return treat_machine_dict(machine)", "language": "python", "code": "def stop(name, call=None):\n    \"\"\"\n    Stop a running machine.\n    @param name: Machine to stop\n    @type name: str\n    @param call: Must be \"action\"\n    @type call: str\n    \"\"\"\n    if call != 'action':\n        raise SaltCloudSystemExit(\n            'The instance action must be called with -a or --action.'\n        )\n\n    log.info(\"Stopping machine: %s\", name)\n    vb_stop_vm(name)\n    machine = vb_get_machine(name)\n    del machine[\"name\"]\n    return treat_machine_dict(machine)", "code_tokens": ["def", "stop", "(", "name", ",", "call", "=", "None", ")", ":", "if", "call", "!=", "'action'", ":", "raise", "SaltCloudSystemExit", "(", "'The instance action must be called with -a or --action.'", ")", "log", ".", "info", "(", "\"Stopping machine: %s\"", ",", "name", ")", "vb_stop_vm", "(", "name", ")", "machine", "=", "vb_get_machine", "(", "name", ")", "del", "machine", "[", "\"name\"", "]", "return", "treat_machine_dict", "(", "machine", ")"], "docstring": "Stop a running machine.\n    @param name: Machine to stop\n    @type name: str\n    @param call: Must be \"action\"\n    @type call: str", "docstring_tokens": ["Stop", "a", "running", "machine", "."], "sha": "e8541fd6e744ab0df786c0f76102e41631f45d46", "url": "https://github.com/saltstack/salt/blob/e8541fd6e744ab0df786c0f76102e41631f45d46/salt/cloud/clouds/virtualbox.py#L391-L408", "partition": "train"}], "suggested_aspects": ["path", "code", "language", "url", "partition", "repo"]}